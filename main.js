/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageWatermarkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/watermark.ts
var import_obsidian = require("obsidian");

// src/i18n.ts
var translations = {
  "ADD_WATERMARK_TITLE": { en: "Add Image Watermark", zh: "\u6DFB\u52A0\u56FE\u7247\u6C34\u5370" },
  "ADD_WATERMARK_DESC": { en: "Select images and set watermark parameters", zh: "\u9009\u62E9\u56FE\u7247\u5E76\u8BBE\u7F6E\u6C34\u5370\u53C2\u6570" },
  "SELECT_IMAGES": { en: "Select Images", zh: "\u9009\u62E9\u56FE\u7247" },
  "SELECT_IMAGE_FILES": { en: "Select Image Files", zh: "\u9009\u62E9\u56FE\u7247\u6587\u4EF6" },
  "WATERMARK_TEMPLATES": { en: "Watermark Templates", zh: "\u6C34\u5370\u6A21\u677F" },
  "WATERMARK_PARAMS": { en: "Watermark Parameters", zh: "\u6C34\u5370\u53C2\u6570" },
  "PREVIEW_EFFECT": { en: "Preview Effect", zh: "\u9884\u89C8\u6548\u679C" },
  "APPLY_WATERMARK": { en: "Apply Watermark", zh: "\u5E94\u7528\u6C34\u5370" },
  "WATERMARK_TEXT": { en: "Watermark Text", zh: "\u6C34\u5370\u6587\u5B57" },
  "WATERMARK_TEXT_DESC": { en: "Enter the watermark text", zh: "\u8F93\u5165\u8981\u6DFB\u52A0\u7684\u6C34\u5370\u6587\u5B57" },
  "WATERMARK_TEXT_PLACEHOLDER": { en: "Enter watermark text", zh: "\u8F93\u5165\u6C34\u5370\u6587\u5B57" },
  "OPACITY": { en: "Opacity", zh: "\u900F\u660E\u5EA6" },
  "OPACITY_DESC": { en: "Set watermark opacity", zh: "\u8BBE\u7F6E\u6C34\u5370\u7684\u900F\u660E\u5EA6" },
  "FONT_SIZE": { en: "Font Size", zh: "\u6587\u5B57\u5927\u5C0F" },
  "FONT_SIZE_DESC": { en: "Set watermark font size (pixels)", zh: "\u8BBE\u7F6E\u6C34\u5370\u6587\u5B57\u7684\u5927\u5C0F\uFF08\u50CF\u7D20\uFF09" },
  "POSITION": { en: "Position", zh: "\u6C34\u5370\u4F4D\u7F6E" },
  "POSITION_DESC": { en: "Select watermark position in image", zh: "\u9009\u62E9\u6C34\u5370\u5728\u56FE\u7247\u4E2D\u7684\u4F4D\u7F6E" },
  "WATERMARK_COLOR": { en: "Watermark Color", zh: "\u6C34\u5370\u989C\u8272" },
  "WATERMARK_COLOR_DESC": { en: "Select watermark text color", zh: "\u9009\u62E9\u6C34\u5370\u6587\u5B57\u7684\u989C\u8272" },
  "COLOR_PLACEHOLDER": { en: "#000000", zh: "#000000" },
  "USE_CUSTOM_POSITION": { en: "Use Custom Position", zh: "\u4F7F\u7528\u81EA\u5B9A\u4E49\u4F4D\u7F6E" },
  "USE_CUSTOM_POSITION_DESC": { en: "Check to freely adjust watermark position", zh: "\u52FE\u9009\u540E\u53EF\u4EE5\u81EA\u7531\u8C03\u6574\u6C34\u5370\u4F4D\u7F6E" },
  "HORIZONTAL_POSITION": { en: "Horizontal Position", zh: "\u6C34\u5E73\u4F4D\u7F6E" },
  "HORIZONTAL_POSITION_DESC": { en: "Adjust watermark horizontal position (percentage)", zh: "\u8C03\u6574\u6C34\u5370\u7684\u6C34\u5E73\u4F4D\u7F6E\uFF08\u767E\u5206\u6BD4\uFF09" },
  "VERTICAL_POSITION": { en: "Vertical Position", zh: "\u5782\u76F4\u4F4D\u7F6E" },
  "VERTICAL_POSITION_DESC": { en: "Adjust watermark vertical position (percentage)", zh: "\u8C03\u6574\u6C34\u5370\u7684\u5782\u76F4\u4F4D\u7F6E\uFF08\u767E\u5206\u6BD4\uFF09" },
  "TOP_LEFT": { en: "Top Left", zh: "\u5DE6\u4E0A\u89D2" },
  "TOP_RIGHT": { en: "Top Right", zh: "\u53F3\u4E0A\u89D2" },
  "BOTTOM_LEFT": { en: "Bottom Left", zh: "\u5DE6\u4E0B\u89D2" },
  "BOTTOM_RIGHT": { en: "Bottom Right", zh: "\u53F3\u4E0B\u89D2" },
  "CENTER": { en: "Center", zh: "\u4E2D\u5FC3" },
  "INTERFACE_LANGUAGE": { en: "Interface Language", zh: "\u754C\u9762\u8BED\u8A00" },
  "INTERFACE_LANGUAGE_DESC": { en: "Select interface language", zh: "\u9009\u62E9\u754C\u9762\u8BED\u8A00" },
  "IMAGE_WATERMARK_SETTINGS": { en: "Image Watermark Settings", zh: "\u56FE\u7247\u6C34\u5370\u63D2\u4EF6\u8BBE\u7F6E" },
  "DEFAULT_WATERMARK_TEXT": { en: "Default Watermark Text", zh: "\u9ED8\u8BA4\u6C34\u5370\u6587\u5B57" },
  "DEFAULT_WATERMARK_TEXT_DESC": { en: "Default text for watermark", zh: "\u6C34\u5370\u7684\u9ED8\u8BA4\u6587\u5B57" },
  "DEFAULT_OPACITY": { en: "Default Opacity", zh: "\u9ED8\u8BA4\u900F\u660E\u5EA6" },
  "DEFAULT_OPACITY_DESC": { en: "Default opacity for watermark (10-100)", zh: "\u6C34\u5370\u7684\u9ED8\u8BA4\u900F\u660E\u5EA6\uFF0810-100\uFF09" },
  "DEFAULT_SIZE": { en: "Default Size", zh: "\u9ED8\u8BA4\u5927\u5C0F" },
  "DEFAULT_SIZE_DESC": { en: "Default font size for watermark (pixels)", zh: "\u6C34\u5370\u7684\u9ED8\u8BA4\u6587\u5B57\u5927\u5C0F\uFF08\u50CF\u7D20\uFF09" },
  "DEFAULT_POSITION": { en: "Default Position", zh: "\u9ED8\u8BA4\u4F4D\u7F6E" },
  "DEFAULT_POSITION_DESC": { en: "Default position for watermark", zh: "\u6C34\u5370\u7684\u9ED8\u8BA4\u4F4D\u7F6E" },
  "DEFAULT_COLOR": { en: "Default Color", zh: "\u9ED8\u8BA4\u989C\u8272" },
  "DEFAULT_COLOR_DESC": { en: "Default color for watermark", zh: "\u6C34\u5370\u7684\u9ED8\u8BA4\u989C\u8272" },
  "WATERMARK_TEMPLATE_MANAGEMENT": { en: "Watermark Template Management", zh: "\u6C34\u5370\u6A21\u677F" },
  "WATERMARK_TEMPLATE_MANAGEMENT_DESC": { en: "Manage common watermark templates for reuse", zh: "\u7BA1\u7406\u5E38\u7528\u7684\u6C34\u5370\u6A21\u677F\uFF0C\u65B9\u4FBF\u91CD\u590D\u4F7F\u7528\u3002" },
  "TEMPLATE_NAME": { en: "Template Name", zh: "\u6A21\u677F\u540D\u79F0" },
  "ADD_NEW_TEMPLATE": { en: "Add New Template", zh: "\u6DFB\u52A0\u65B0\u6A21\u677F" },
  "COLOR": { en: "Color", zh: "\u989C\u8272" },
  "DELETE": { en: "Delete", zh: "\u5220\u9664" },
  "ADD_WATERMARK_TEMPLATE": { en: "Add Watermark Template", zh: "\u6DFB\u52A0\u6C34\u5370\u6A21\u677F" },
  "TEMPLATE_NAME_PLACEHOLDER": { en: "Enter template name", zh: "\u8F93\u5165\u6A21\u677F\u540D\u79F0" },
  "SAVE_TEMPLATE": { en: "Save Template", zh: "\u4FDD\u5B58\u6A21\u677F" },
  "PLEASE_ENTER_TEMPLATE_NAME": { en: "Please enter template name", zh: "\u8BF7\u8F93\u5165\u6A21\u677F\u540D\u79F0" },
  "ADD_WATERMARK_COMMAND": { en: "Add watermark to image", zh: "\u4E3A\u56FE\u7247\u6DFB\u52A0\u6C34\u5370" },
  "ADD_WATERMARK": { en: "Add Watermark", zh: "\u6DFB\u52A0\u6C34\u5370" },
  "NO_IMAGES_SELECTED": { en: "Please select images first", zh: "\u8BF7\u5148\u9009\u62E9\u56FE\u7247" },
  "NO_WATERMARK_TEXT": { en: "Please enter watermark text", zh: "\u8BF7\u8F93\u5165\u6C34\u5370\u6587\u5B57" },
  "WATERMARK_APPLIED_SUCCESS": { en: "Watermark applied successfully to {count} image(s)", zh: "\u6C34\u5370\u5DF2\u6210\u529F\u5E94\u7528\u5230 {count} \u5F20\u56FE\u7247" },
  "ERROR_APPLYING_WATERMARK": { en: "Error applying watermark to image {name}: {error}", zh: "\u4E3A\u56FE\u7247 {name} \u6DFB\u52A0\u6C34\u5370\u65F6\u51FA\u9519: {error}" },
  "WATERMARK_SETTINGS_SAVED": { en: "Watermark settings saved", zh: "\u6C34\u5370\u8BBE\u7F6E\u5DF2\u4FDD\u5B58" },
  "TEMPLATE_ADDED": { en: "Template added successfully", zh: "\u6A21\u677F\u6DFB\u52A0\u6210\u529F" },
  "SELECT_AT_LEAST_ONE_IMAGE": { en: "Please select at least one image", zh: "\u8BF7\u9009\u62E9\u81F3\u5C11\u4E00\u5F20\u56FE\u7247" },
  "PREVIEW_IMAGE": { en: "Preview Image", zh: "\u9884\u89C8\u56FE\u50CF" },
  "PREVIEW_IMAGE_DESC": { en: 'Click "Apply Watermark" button to add watermark to selected images', zh: '\u70B9\u51FB"\u5E94\u7528\u6C34\u5370"\u6309\u94AE\u6DFB\u52A0\u6C34\u5370\u5230\u9009\u4E2D\u56FE\u7247' },
  "ERROR_PROCESSING_IMAGE": { en: "Error processing image", zh: "\u5904\u7406\u56FE\u7247\u65F6\u51FA\u9519" },
  "SUCCESS_ADD_WATERMARK": { en: "Successfully added watermark to {count} images", zh: "\u5DF2\u6210\u529F\u4E3A {count} \u5F20\u56FE\u7247\u6DFB\u52A0\u6C34\u5370" }
};
var I18n = class {
  constructor(language = "en") {
    this.language = language;
  }
  setLanguage(language) {
    this.language = language;
  }
  getLanguage() {
    return this.language;
  }
  t(key, substitutions = {}) {
    const translation = translations[key];
    if (!translation) {
      console.warn(`Translation key not found: ${key}`);
      return key;
    }
    let text = translation[this.language];
    Object.entries(substitutions).forEach(([placeholder, value]) => {
      text = text.replace(new RegExp(`\\?\\{${placeholder}\\}`, "g"), String(value));
      text = text.replace(new RegExp(`\\{${placeholder}\\}`, "g"), String(value));
    });
    return text;
  }
};

// src/watermark.ts
var WatermarkModal = class extends import_obsidian.Modal {
  constructor(app, plugin, preselectedFiles = []) {
    super(app);
    this.app = app;
    this.plugin = plugin;
    this.selectedFiles = preselectedFiles;
    this.selectedTemplate = null;
    this.i18n = new I18n(this.plugin.settings.language);
    this.watermarkOptions = {
      text: plugin.settings.defaultWatermarkText,
      opacity: plugin.settings.defaultOpacity,
      size: plugin.settings.defaultSize,
      position: plugin.settings.defaultPosition,
      color: "#000000",
      useCustomPosition: false,
      xPosition: 50,
      yPosition: 50
    };
    if (plugin.settings.defaultTemplate) {
      const defaultTemplate = plugin.settings.watermarkTemplates.find((t) => t.name === plugin.settings.defaultTemplate);
      if (defaultTemplate) {
        this.selectedTemplate = defaultTemplate.name;
        this.watermarkOptions = {
          text: defaultTemplate.text,
          opacity: defaultTemplate.opacity,
          size: defaultTemplate.size,
          position: defaultTemplate.position,
          color: defaultTemplate.color || "#000000",
          useCustomPosition: defaultTemplate.useCustomPosition || false,
          xPosition: defaultTemplate.xPosition || 50,
          yPosition: defaultTemplate.yPosition || 50
        };
      }
    }
    this.previewCanvas = document.createElement("canvas");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.className = "watermark-modal";
    contentEl.style.display = "flex";
    contentEl.style.flexDirection = "column";
    contentEl.style.height = "100%";
    const header = contentEl.createDiv();
    header.style.marginBottom = "20px";
    header.createEl("h2", { text: this.i18n.t("ADD_WATERMARK_TITLE") });
    header.createEl("p", { text: this.i18n.t("ADD_WATERMARK_DESC") });
    const mainContent = contentEl.createDiv();
    mainContent.style.flex = "1";
    mainContent.style.overflow = "auto";
    const functionPanel = mainContent.createDiv();
    functionPanel.style.display = "flex";
    functionPanel.style.flexDirection = "column";
    functionPanel.style.gap = "15px";
    const fileSelection = functionPanel.createDiv();
    fileSelection.createEl("h3", { text: this.i18n.t("Select_Image") });
    if (this.selectedFiles.length > 0) {
      const filesList = fileSelection.createDiv();
      filesList.style.maxHeight = "150px";
      filesList.style.overflowY = "auto";
      filesList.style.border = "1px solid var(--background-modifier-border)";
      filesList.style.borderRadius = "4px";
      filesList.style.padding = "10px";
      this.selectedFiles.forEach((file, index) => {
        const fileItem = filesList.createDiv();
        fileItem.style.display = "flex";
        fileItem.style.justifyContent = "space-between";
        fileItem.style.alignItems = "center";
        fileItem.style.padding = "5px 0";
        fileItem.style.borderBottom = index < this.selectedFiles.length - 1 ? "1px solid var(--background-modifier-border)" : "none";
        fileItem.createSpan({ text: file.name });
        fileItem.createEl("button", { text: "delete" }).addEventListener("click", () => {
          this.selectedFiles.splice(index, 1);
          this.onClose();
          this.onOpen();
        });
      });
    }
    const selectButton = fileSelection.createEl("button", {
      text: this.i18n.t("Select_Image_Button"),
      cls: "mod-cta"
    });
    selectButton.addEventListener("click", async () => {
      try {
        const fileSystemAdapter = this.app.vault.adapter;
        const folderPath = await fileSystemAdapter.getBasePath();
        const input = document.createElement("input");
        input.type = "file";
        input.accept = ".jpg,.jpeg,.png,.gif";
        input.multiple = true;
        input.addEventListener("change", async (event) => {
          const target = event.target;
          if (target.files && target.files.length > 0) {
            const selectedFileNames = Array.from(target.files).map((file) => file.name);
            const filesToAdd = [];
            for (const file of this.app.vault.getFiles()) {
              if (file.extension && ["jpg", "jpeg", "png", "gif"].includes(file.extension.toLowerCase())) {
                if (selectedFileNames.includes(file.name)) {
                  filesToAdd.push(file);
                }
              }
            }
            if (filesToAdd.length > 0) {
              this.selectedFiles = [...this.selectedFiles, ...filesToAdd];
              this.onClose();
              this.onOpen();
            }
          }
        });
        input.click();
      } catch (error) {
        console.error("\u9009\u62E9\u6587\u4EF6\u65F6\u53D1\u751F\u9519\u8BEF:", error);
        new import_obsidian.Notice("\u9009\u62E9\u6587\u4EF6\u5931\u8D25\uFF0C\u8BF7\u91CD\u8BD5", 3e3);
      }
    });
    const templateSelection = functionPanel.createDiv();
    templateSelection.createEl("h3", { text: this.i18n.t("WATERMARK_TEMPLATES") });
    const templateDropdown = new import_obsidian.DropdownComponent(templateSelection);
    templateDropdown.addOption("", "\u65E0\uFF08\u4F7F\u7528\u81EA\u5B9A\u4E49\u8BBE\u7F6E\uFF09");
    this.plugin.settings.watermarkTemplates.forEach((template) => {
      templateDropdown.addOption(template.name, template.name);
    });
    templateDropdown.onChange((value) => {
      this.selectedTemplate = value || null;
      if (value) {
        const template = this.plugin.settings.watermarkTemplates.find((t) => t.name === value);
        if (template) {
          this.watermarkOptions = {
            text: template.text,
            opacity: template.opacity,
            size: template.size,
            position: template.position,
            color: template.color || "#000000",
            useCustomPosition: template.useCustomPosition || false,
            xPosition: template.xPosition || 50,
            yPosition: template.yPosition || 50
          };
          this.updateWatermarkControls();
          this.updatePreview();
        }
      }
    });
    const watermarkSettings = functionPanel.createDiv();
    watermarkSettings.createEl("h3", { text: this.i18n.t("WATERMARK_PARAMS") });
    const textSetting = new import_obsidian.Setting(watermarkSettings);
    textSetting.setName(this.i18n.t("WATERMARK_TEXT")).setDesc(this.i18n.t("WATERMARK_TEXT_DESC")).addText((text) => {
      this.textComponent = text;
      text.setPlaceholder(this.i18n.t("WATERMARK_TEXT_PLACEHOLDER")).setValue(this.watermarkOptions.text).onChange((value) => {
        this.watermarkOptions.text = value;
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      });
    });
    const opacitySetting = new import_obsidian.Setting(watermarkSettings);
    opacitySetting.setName(this.i18n.t("OPACITY")).setDesc(this.i18n.t("OPACITY_DESC")).addSlider((slider) => {
      this.opacitySlider = slider;
      slider.setLimits(10, 100, 5).setValue(this.watermarkOptions.opacity).onChange((value) => {
        this.watermarkOptions.opacity = value;
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      }).setDynamicTooltip();
    });
    const sizeSetting = new import_obsidian.Setting(watermarkSettings);
    sizeSetting.setName(this.i18n.t("FONT_SIZE")).setDesc(this.i18n.t("FONT_SIZE_DESC")).addSlider((slider) => {
      this.sizeSlider = slider;
      slider.setLimits(8, 36, 2).setValue(this.watermarkOptions.size).onChange((value) => {
        this.watermarkOptions.size = value;
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      }).setDynamicTooltip();
    });
    const positionSetting = new import_obsidian.Setting(watermarkSettings);
    positionSetting.setName(this.i18n.t("POSITION")).setDesc(this.i18n.t("POSITION_DESC")).addDropdown((dropdown) => {
      this.positionDropdown = dropdown;
      dropdown.addOption("top-left", this.i18n.t("TOP_LEFT")).addOption("top-right", this.i18n.t("TOP_RIGHT")).addOption("bottom-left", this.i18n.t("BOTTOM_LEFT")).addOption("bottom-right", this.i18n.t("BOTTOM_RIGHT")).addOption("center", this.i18n.t("CENTER")).setValue(this.watermarkOptions.position).onChange((value) => {
        this.watermarkOptions.position = value;
        this.watermarkOptions.useCustomPosition = false;
        if (this.customPositionToggle)
          this.customPositionToggle.setValue(false);
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      });
    });
    const colorSetting = new import_obsidian.Setting(watermarkSettings);
    colorSetting.setName(this.i18n.t("WATERMARK_COLOR")).setDesc(this.i18n.t("WATERMARK_COLOR_DESC")).addText((text) => {
      this.colorComponent = text;
      text.setPlaceholder("#000000").setValue(this.watermarkOptions.color).onChange((value) => {
        this.watermarkOptions.color = value;
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      });
    });
    const colorPicker = colorSetting.controlEl.createEl("input", {
      type: "color",
      value: this.watermarkOptions.color
    });
    colorPicker.style.marginLeft = "10px";
    colorPicker.style.cursor = "pointer";
    colorPicker.addEventListener("input", (event) => {
      const target = event.target;
      if (this.colorComponent)
        this.colorComponent.setValue(target.value);
      this.watermarkOptions.color = target.value;
      this.selectedTemplate = null;
      templateDropdown.setValue("");
      this.updatePreview();
    });
    const customPositionToggle = new import_obsidian.Setting(watermarkSettings);
    customPositionToggle.setName(this.i18n.t("USE_CUSTOM_POSITION")).setDesc(this.i18n.t("USE_CUSTOM_POSITION_DESC")).addToggle((toggle) => {
      this.customPositionToggle = toggle;
      toggle.setValue(this.watermarkOptions.useCustomPosition).onChange((value) => {
        this.watermarkOptions.useCustomPosition = value;
        if (this.xSlider && this.ySlider) {
          this.xSlider.setDisabled(!value);
          this.ySlider.setDisabled(!value);
        }
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      });
    });
    const xPositionSetting = new import_obsidian.Setting(watermarkSettings);
    xPositionSetting.setName(this.i18n.t("HORIZONTAL_POSITION")).setDesc(this.i18n.t("HORIZONTAL_POSITION_DESC")).addSlider((slider) => {
      this.xSlider = slider;
      slider.setLimits(0, 100, 1).setValue(this.watermarkOptions.xPosition).setDisabled(!this.watermarkOptions.useCustomPosition).onChange((value) => {
        this.watermarkOptions.xPosition = value;
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      }).setDynamicTooltip();
    });
    const yPositionSetting = new import_obsidian.Setting(watermarkSettings);
    yPositionSetting.setName(this.i18n.t("VERTICAL_POSITION")).setDesc(this.i18n.t("VERTICAL_POSITION_DESC")).addSlider((slider) => {
      this.ySlider = slider;
      slider.setLimits(0, 100, 1).setValue(this.watermarkOptions.yPosition).setDisabled(!this.watermarkOptions.useCustomPosition).onChange((value) => {
        this.watermarkOptions.yPosition = value;
        this.selectedTemplate = null;
        templateDropdown.setValue("");
        this.updatePreview();
      }).setDynamicTooltip();
    });
    const previewSection = functionPanel.createDiv();
    previewSection.createEl("h3", { text: this.i18n.t("PREVIEW_EFFECT") });
    const previewContainer = previewSection.createDiv();
    previewContainer.classList.add("preview-container");
    previewContainer.style.height = "300px";
    previewContainer.style.display = "flex";
    previewContainer.style.justifyContent = "center";
    previewContainer.style.alignItems = "center";
    previewContainer.style.border = "1px solid var(--background-modifier-border)";
    previewContainer.style.borderRadius = "4px";
    previewContainer.style.overflow = "hidden";
    previewContainer.style.marginBottom = "20px";
    this.previewCanvas.style.maxWidth = "100%";
    this.previewCanvas.style.maxHeight = "100%";
    previewContainer.appendChild(this.previewCanvas);
    const applyButton = functionPanel.createEl("button", {
      text: this.i18n.t("APPLY_WATERMARK"),
      cls: "mod-cta",
      attr: { style: "width: 100%; margin-bottom: 20px;" }
    });
    applyButton.addEventListener("click", async () => {
      if (this.selectedFiles.length === 0) {
        alert(this.i18n.t("SELECT_AT_LEAST_ONE_IMAGE"));
        return;
      }
      await this.applyWatermarkToImages();
      this.close();
    });
    this.updatePreview();
  }
  updateWatermarkControls() {
    if (this.textComponent)
      this.textComponent.setValue(this.watermarkOptions.text);
    if (this.opacitySlider)
      this.opacitySlider.setValue(this.watermarkOptions.opacity);
    if (this.sizeSlider)
      this.sizeSlider.setValue(this.watermarkOptions.size);
    if (this.positionDropdown)
      this.positionDropdown.setValue(this.watermarkOptions.position);
    if (this.colorComponent)
      this.colorComponent.setValue(this.watermarkOptions.color);
    if (this.customPositionToggle)
      this.customPositionToggle.setValue(this.watermarkOptions.useCustomPosition);
    if (this.xSlider) {
      this.xSlider.setValue(this.watermarkOptions.xPosition);
      this.xSlider.setDisabled(!this.watermarkOptions.useCustomPosition);
    }
    if (this.ySlider) {
      this.ySlider.setValue(this.watermarkOptions.yPosition);
      this.ySlider.setDisabled(!this.watermarkOptions.useCustomPosition);
    }
  }
  updatePreview() {
    console.log("updatePreview called with options:", this.watermarkOptions);
    if (!this.previewCanvas || !this.previewCanvas.isConnected) {
      console.log("Recreating preview canvas");
      const existingCanvas = document.querySelector(".preview-container canvas");
      if (existingCanvas) {
        existingCanvas.remove();
      }
      this.previewCanvas = document.createElement("canvas");
      this.previewCanvas.style.maxWidth = "100%";
      this.previewCanvas.style.maxHeight = "100%";
      const previewContainer = document.querySelector(".preview-container");
      if (previewContainer) {
        previewContainer.appendChild(this.previewCanvas);
      }
    }
    const canvas = this.previewCanvas;
    const ctx = canvas.getContext("2d");
    if (!ctx) {
      console.log("Failed to get canvas context");
      return;
    }
    canvas.width = 300;
    canvas.height = 200;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "#f0f0f0";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "#333";
    ctx.font = "14px sans-serif";
    ctx.textAlign = "center";
    ctx.fillText(this.i18n.t("PREVIEW_IMAGE"), canvas.width / 2, canvas.height / 2 - 10);
    ctx.font = "12px sans-serif";
    ctx.fillStyle = "#666";
    ctx.fillText(this.i18n.t("PREVIEW_IMAGE_DESC"), canvas.width / 2, canvas.height / 2 + 10);
    console.log("Drawing watermark");
    this.drawWatermark(ctx, canvas.width, canvas.height);
    canvas.style.display = "none";
    canvas.offsetHeight;
    canvas.style.display = "";
    console.log("updatePreview completed");
  }
  drawWatermark(ctx, width, height) {
    console.log("drawWatermark called with:", { width, height, options: this.watermarkOptions });
    const { text, opacity, size, position, color, useCustomPosition, xPosition, yPosition } = this.watermarkOptions;
    ctx.save();
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.globalAlpha = 1;
    ctx.globalCompositeOperation = "source-over";
    ctx.font = `${size}px sans-serif`;
    const rgb = this.hexToRgb(color);
    if (rgb) {
      ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity / 100})`;
    } else {
      ctx.fillStyle = `rgba(0, 0, 0, ${opacity / 100})`;
    }
    let x = width / 2;
    let y = height / 2;
    if (useCustomPosition) {
      x = width * xPosition / 100;
      y = height * yPosition / 100;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      console.log("Using custom position:", { x, y, xPosition, yPosition });
    } else {
      const margin = Math.min(size, width / 4, height / 4);
      switch (position) {
        case "top-left":
          x = margin;
          y = margin;
          ctx.textAlign = "left";
          ctx.textBaseline = "top";
          break;
        case "top-right":
          x = width - margin;
          y = margin;
          ctx.textAlign = "right";
          ctx.textBaseline = "top";
          break;
        case "bottom-left":
          x = margin;
          y = height - margin;
          ctx.textAlign = "left";
          ctx.textBaseline = "bottom";
          break;
        case "bottom-right":
          x = width - margin;
          y = height - margin;
          ctx.textAlign = "right";
          ctx.textBaseline = "bottom";
          break;
        case "center":
        default:
          x = width / 2;
          y = height / 2;
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          break;
      }
      console.log("Using preset position:", { position, x, y, size, width, height });
    }
    ctx.fillText(text, x, y);
    console.log("Watermark drawn:", { text, x, y, textAlign: ctx.textAlign, textBaseline: ctx.textBaseline });
    ctx.restore();
  }
  hexToRgb(hex) {
    hex = hex.replace(/^#/, "");
    let bigint = parseInt(hex, 16);
    let r = bigint >> 16 & 255;
    let g = bigint >> 8 & 255;
    let b = bigint & 255;
    return { r, g, b };
  }
  async applyWatermarkToImages() {
    const adapter = this.app.vault.adapter;
    for (const file of this.selectedFiles) {
      try {
        const fileExtension = file.extension;
        const fileNameWithoutExt = file.name.replace(`.${fileExtension}`, "");
        const newFileName = `${fileNameWithoutExt}_watermark.${fileExtension}`;
        const newFilePath = `${file.parent.path}/${newFileName}`;
        const imageData = await adapter.readBinary(file.path);
        const img = new Image();
        const imgUrl = URL.createObjectURL(new Blob([imageData]));
        await new Promise((resolve, reject) => {
          img.onload = () => resolve();
          img.onerror = reject;
          img.src = imgUrl;
        });
        const canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext("2d");
        if (!ctx)
          throw new Error("\u65E0\u6CD5\u521B\u5EFA\u753B\u5E03\u4E0A\u4E0B\u6587");
        ctx.drawImage(img, 0, 0);
        this.drawWatermark(ctx, img.width, img.height);
        const blob = await new Promise((resolve) => {
          canvas.toBlob((blob2) => {
            if (blob2)
              resolve(blob2);
            else
              throw new Error("\u65E0\u6CD5\u5C06\u753B\u5E03\u8F6C\u6362\u4E3Ablob");
          }, `image/${fileExtension === "jpg" ? "jpeg" : fileExtension}`);
        });
        const buffer = await blob.arrayBuffer();
        await adapter.writeBinary(newFilePath, new Uint8Array(buffer));
        URL.revokeObjectURL(imgUrl);
        console.log(`\u5DF2\u4E3A\u56FE\u7247\u6DFB\u52A0\u6C34\u5370\u5E76\u4FDD\u5B58\u4E3A: ${newFilePath}`);
      } catch (error) {
        console.error(`\u5904\u7406\u56FE\u7247 ${file.name} \u65F6\u51FA\u9519:`, error);
        alert(`${this.i18n.t("ERROR_PROCESSING_IMAGE")} ${file.name}: ${error instanceof Error ? error.message : "\u672A\u77E5\u9519\u8BEF"}`);
      }
    }
    new import_obsidian.Notice(this.i18n.t("SUCCESS_ADD_WATERMARK", { count: this.selectedFiles.length }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  defaultWatermarkText: "Confidential",
  defaultOpacity: 50,
  defaultSize: 12,
  defaultPosition: "center",
  defaultColor: "#000000",
  defaultTemplate: null,
  language: "en",
  watermarkTemplates: []
};
var ImageWatermarkPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.i18n = new I18n(this.settings.language);
    this.addCommand({
      id: "add-watermark-to-image",
      name: this.i18n.t("ADD_WATERMARK_COMMAND"),
      callback: () => {
        new WatermarkModal(this.app, this).open();
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian2.TFile && ["jpg", "jpeg", "png", "gif"].includes(file.extension.toLowerCase())) {
          menu.addItem((item) => {
            item.setTitle(this.i18n.t("ADD_WATERMARK")).setIcon("image").onClick(() => {
              new WatermarkModal(this.app, this, [file]).open();
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file, source, leaf) => {
        var _a;
        if (source === "file-explorer") {
          const fileExplorerView = (_a = this.app.workspace.getLeavesOfType("file-explorer")[0]) == null ? void 0 : _a.view;
          if (fileExplorerView && "fileItems" in fileExplorerView) {
            const fileItems = fileExplorerView.fileItems;
            const selectedFiles = Object.keys(fileItems).map((key) => fileItems[key].file).filter(
              (f) => f instanceof import_obsidian2.TFile && ["jpg", "jpeg", "png", "gif"].includes(f.extension.toLowerCase())
            );
            if (selectedFiles.length > 1) {
              menu.addItem((item) => {
                item.setTitle("\u4E3A\u9009\u4E2D\u56FE\u7247\u6DFB\u52A0\u6C34\u5370").setIcon("image").onClick(() => {
                  new WatermarkModal(this.app, this, selectedFiles).open();
                });
              });
            }
          }
        }
      })
    );
    this.addSettingTab(new WatermarkSettingTab(this.app, this));
    this.addRibbonIcon("image", "\u56FE\u7247\u6C34\u5370", () => {
      var _a;
      let selectedFiles = [];
      try {
        const fileExplorerView = (_a = this.app.workspace.getLeavesOfType("file-explorer")[0]) == null ? void 0 : _a.view;
        if (fileExplorerView) {
          if ("selection" in fileExplorerView) {
            console.log("\u4F7F\u7528selection\u5C5E\u6027\u83B7\u53D6\u9009\u4E2D\u6587\u4EF6");
            const selection = fileExplorerView.selection;
            if (selection && Array.isArray(selection)) {
              selectedFiles = selection.filter(
                (file) => file instanceof import_obsidian2.TFile && ["jpg", "jpeg", "png", "gif"].includes(file.extension.toLowerCase())
              );
            }
          } else if ("getSelection" in fileExplorerView && typeof fileExplorerView.getSelection === "function") {
            console.log("\u4F7F\u7528getSelection\u65B9\u6CD5\u83B7\u53D6\u9009\u4E2D\u6587\u4EF6");
            const selection = fileExplorerView.getSelection();
            if (selection && Array.isArray(selection)) {
              selectedFiles = selection.filter(
                (file) => file instanceof import_obsidian2.TFile && ["jpg", "jpeg", "png", "gif"].includes(file.extension.toLowerCase())
              );
            }
          } else if ("fileItems" in fileExplorerView) {
            console.log("\u4F7F\u7528fileItems\u65B9\u6CD5\u83B7\u53D6\u9009\u4E2D\u6587\u4EF6");
            const fileItems = fileExplorerView.fileItems;
            selectedFiles = Object.values(fileItems).filter(
              (item) => item && item.file instanceof import_obsidian2.TFile && item.selected && ["jpg", "jpeg", "png", "gif"].includes(item.file.extension.toLowerCase())
            ).map((item) => item.file);
          }
        }
        console.log(`\u6210\u529F\u83B7\u53D6\u5230 ${selectedFiles.length} \u4E2A\u9009\u4E2D\u7684\u56FE\u7247\u6587\u4EF6`);
        if (selectedFiles.length > 0) {
          console.log("\u9009\u4E2D\u7684\u6587\u4EF6\u5217\u8868:", selectedFiles.map((f) => f.name));
        }
      } catch (error) {
        console.error("\u83B7\u53D6\u9009\u4E2D\u6587\u4EF6\u65F6\u53D1\u751F\u9519\u8BEF:", error);
      }
      new WatermarkModal(this.app, this, selectedFiles).open();
    });
  }
  onunload() {
    console.log("\u5378\u8F7D\u56FE\u7247\u6C34\u5370\u63D2\u4EF6");
  }
  async loadSettings() {
    this.settings = { ...DEFAULT_SETTINGS, ...await this.loadData() };
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var WatermarkSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: this.plugin.i18n.t("IMAGE_WATERMARK_SETTINGS") });
    new import_obsidian2.Setting(containerEl).setName(this.plugin.i18n.t("DEFAULT_WATERMARK_TEXT")).setDesc(this.plugin.i18n.t("DEFAULT_WATERMARK_TEXT_DESC")).addText(
      (text) => text.setPlaceholder(this.plugin.i18n.t("ENTER_WATERMARK_TEXT")).setValue(this.plugin.settings.defaultWatermarkText).onChange(async (value) => {
        this.plugin.settings.defaultWatermarkText = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(this.plugin.i18n.t("DEFAULT_OPACITY")).setDesc(this.plugin.i18n.t("DEFAULT_OPACITY_DESC")).addSlider(
      (slider) => slider.setLimits(10, 100, 5).setValue(this.plugin.settings.defaultOpacity).onChange(async (value) => {
        this.plugin.settings.defaultOpacity = value;
        await this.plugin.saveSettings();
      }).setDynamicTooltip()
    );
    new import_obsidian2.Setting(containerEl).setName(this.plugin.i18n.t("DEFAULT_SIZE")).setDesc(this.plugin.i18n.t("DEFAULT_SIZE_DESC")).addSlider(
      (slider) => slider.setLimits(8, 36, 2).setValue(this.plugin.settings.defaultSize).onChange(async (value) => {
        this.plugin.settings.defaultSize = value;
        await this.plugin.saveSettings();
      }).setDynamicTooltip()
    );
    new import_obsidian2.Setting(containerEl).setName(this.plugin.i18n.t("DEFAULT_POSITION")).setDesc(this.plugin.i18n.t("DEFAULT_POSITION_DESC")).addDropdown(
      (dropdown) => dropdown.addOption("top-left", this.plugin.i18n.t("TOP_LEFT")).addOption("top-right", this.plugin.i18n.t("TOP_RIGHT")).addOption("bottom-left", this.plugin.i18n.t("BOTTOM_LEFT")).addOption("bottom-right", this.plugin.i18n.t("BOTTOM_RIGHT")).addOption("center", this.plugin.i18n.t("CENTER")).setValue(this.plugin.settings.defaultPosition).onChange(async (value) => {
        this.plugin.settings.defaultPosition = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(this.plugin.i18n.t("INTERFACE_LANGUAGE")).setDesc(this.plugin.i18n.t("INTERFACE_LANGUAGE_DESC")).addDropdown(
      (dropdown) => dropdown.addOption("en", "English").addOption("zh", "\u4E2D\u6587").setValue(this.plugin.settings.language).onChange(async (value) => {
        this.plugin.settings.language = value;
        this.plugin.i18n.setLanguage(value);
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(this.plugin.i18n.t("DEFAULT_COLOR")).setDesc(this.plugin.i18n.t("DEFAULT_COLOR_DESC")).addText(
      (text) => text.setPlaceholder("#000000").setValue(this.plugin.settings.defaultColor).onChange(async (value) => {
        if (/^#[0-9A-F]{6}$/i.test(value) || /^#[0-9A-F]{3}$/i.test(value)) {
          this.plugin.settings.defaultColor = value;
          await this.plugin.saveSettings();
        }
      })
    ).then((setting) => {
      const colorPicker = setting.controlEl.createEl("input", {
        type: "color",
        value: this.plugin.settings.defaultColor
      });
      colorPicker.style.marginLeft = "10px";
      colorPicker.style.cursor = "pointer";
      colorPicker.addEventListener("input", async (event) => {
        const target = event.target;
        this.plugin.settings.defaultColor = target.value;
        const textInput = setting.controlEl.querySelector('input[type="text"]');
        if (textInput)
          textInput.value = target.value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Default Template").setDesc("Select default watermark template (leave empty to use custom settings)").addDropdown((dropdown) => {
      dropdown.addOption("", "None (use custom settings)");
      this.plugin.settings.watermarkTemplates.forEach((template) => {
        dropdown.addOption(template.name, template.name);
      });
      dropdown.setValue(this.plugin.settings.defaultTemplate || "").onChange(async (value) => {
        this.plugin.settings.defaultTemplate = value || null;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: this.plugin.i18n.t("WATERMARK_TEMPLATE_MANAGEMENT") });
    containerEl.createEl("p", { text: this.plugin.i18n.t("WATERMARK_TEMPLATE_MANAGEMENT_DESC") });
    this.plugin.settings.watermarkTemplates.forEach((template, index) => {
      const templateEl = containerEl.createDiv();
      templateEl.style.border = "1px solid var(--background-modifier-border)";
      templateEl.style.padding = "10px";
      templateEl.style.borderRadius = "4px";
      templateEl.style.marginBottom = "10px";
      templateEl.createEl("div", { text: `${this.plugin.i18n.t("TEMPLATE_NAME")}: ${template.name}` });
      templateEl.createEl("div", { text: `${this.plugin.i18n.t("WATERMARK_TEXT")}: ${template.text}` });
      templateEl.createEl("div", { text: `${this.plugin.i18n.t("OPACITY")}: ${template.opacity}%, ${this.plugin.i18n.t("FONT_SIZE")}: ${template.size}px, ${this.plugin.i18n.t("POSITION")}: ${this.getPositionText(template.position)}` });
      const colorContainer = templateEl.createEl("div");
      colorContainer.appendText(`${this.plugin.i18n.t("COLOR")}: `);
      const colorBox = colorContainer.createEl("span");
      colorBox.style.display = "inline-block";
      colorBox.style.width = "20px";
      colorBox.style.height = "20px";
      colorBox.style.backgroundColor = template.color;
      colorBox.style.border = "1px solid var(--background-modifier-border)";
      colorBox.style.borderRadius = "3px";
      colorBox.style.marginLeft = "5px";
      colorBox.title = template.color;
      templateEl.createEl("button", {
        text: this.plugin.i18n.t("DELETE")
      }).addEventListener("click", async () => {
        this.plugin.settings.watermarkTemplates.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).addButton(
      (btn) => btn.setButtonText(this.plugin.i18n.t("ADD_NEW_TEMPLATE")).setCta().onClick(async () => {
        const newTemplateModal = new AddTemplateModal(this.app, this.plugin);
        newTemplateModal.onClose = () => this.display();
        newTemplateModal.open();
      })
    );
  }
  getPositionText(position) {
    const positionMap = {
      "top-left": this.plugin.i18n.t("TOP_LEFT"),
      "top-right": this.plugin.i18n.t("TOP_RIGHT"),
      "bottom-left": this.plugin.i18n.t("BOTTOM_LEFT"),
      "bottom-right": this.plugin.i18n.t("BOTTOM_RIGHT"),
      "center": this.plugin.i18n.t("CENTER")
    };
    return positionMap[position] || position;
  }
};
var AddTemplateModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.templateName = "";
    this.watermarkText = plugin.settings.defaultWatermarkText;
    this.opacity = plugin.settings.defaultOpacity;
    this.size = plugin.settings.defaultSize;
    this.position = plugin.settings.defaultPosition;
    this.color = plugin.settings.defaultColor;
    this.useCustomPosition = false;
    this.xPosition = 50;
    this.yPosition = 50;
    this.previewCanvas = document.createElement("canvas");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.plugin.i18n.t("ADD_WATERMARK_TEMPLATE") });
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("TEMPLATE_NAME")).setDesc("Name your template").addText(
      (text) => text.setPlaceholder(this.plugin.i18n.t("TEMPLATE_NAME_PLACEHOLDER")).onChange((value) => this.templateName = value)
    );
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("WATERMARK_TEXT")).setDesc(this.plugin.i18n.t("WATERMARK_TEXT_DESC")).addText(
      (text) => text.setPlaceholder(this.plugin.i18n.t("WATERMARK_TEXT_PLACEHOLDER")).setValue(this.watermarkText).onChange((value) => this.watermarkText = value)
    );
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("OPACITY")).setDesc(this.plugin.i18n.t("OPACITY_DESC")).addSlider(
      (slider) => slider.setLimits(10, 100, 5).setValue(this.opacity).onChange((value) => {
        this.opacity = value;
        this.updatePreview();
      }).setDynamicTooltip()
    );
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("FONT_SIZE")).setDesc(this.plugin.i18n.t("FONT_SIZE_DESC")).addSlider(
      (slider) => slider.setLimits(8, 36, 2).setValue(this.size).onChange((value) => {
        this.size = value;
        this.updatePreview();
      }).setDynamicTooltip()
    );
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("POSITION")).setDesc(this.plugin.i18n.t("POSITION_DESC")).addDropdown((dropdown) => {
      dropdown.addOption("top-left", this.plugin.i18n.t("TOP_LEFT")).addOption("top-right", this.plugin.i18n.t("TOP_RIGHT")).addOption("bottom-left", this.plugin.i18n.t("BOTTOM_LEFT")).addOption("bottom-right", this.plugin.i18n.t("BOTTOM_RIGHT")).addOption("center", this.plugin.i18n.t("CENTER")).setValue(this.position).onChange((value) => {
        this.position = value;
        this.updatePreview();
      });
    });
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("WATERMARK_COLOR")).setDesc(this.plugin.i18n.t("WATERMARK_COLOR_DESC")).addText(
      (text) => text.setPlaceholder(this.plugin.i18n.t("COLOR_PLACEHOLDER")).setValue(this.color).onChange((value) => {
        if (/^#[0-9A-F]{6}$/i.test(value) || /^#[0-9A-F]{3}$/i.test(value)) {
          this.color = value;
        }
        this.updatePreview();
      })
    ).then((setting) => {
      const colorPicker = setting.controlEl.createEl("input", {
        type: "color",
        value: this.color
      });
      colorPicker.style.marginLeft = "10px";
      colorPicker.style.cursor = "pointer";
      colorPicker.addEventListener("input", (event) => {
        const target = event.target;
        this.color = target.value;
        const textInput = setting.controlEl.querySelector('input[type="text"]');
        if (textInput)
          textInput.value = target.value;
        this.updatePreview();
      });
    });
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("USE_CUSTOM_POSITION")).setDesc(this.plugin.i18n.t("USE_CUSTOM_POSITION_DESC")).addToggle(
      (toggle) => toggle.setValue(this.useCustomPosition).onChange((value) => {
        this.useCustomPosition = value;
        if (this.xSlider)
          this.xSlider.setDisabled(!value);
        if (this.ySlider)
          this.ySlider.setDisabled(!value);
        this.updatePreview();
      })
    );
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("HORIZONTAL_POSITION")).setDesc(this.plugin.i18n.t("HORIZONTAL_POSITION_DESC")).addSlider((slider) => {
      this.xSlider = slider;
      return slider.setLimits(0, 100, 1).setValue(this.xPosition).setDisabled(!this.useCustomPosition).onChange((value) => {
        this.xPosition = value;
        this.updatePreview();
      }).setDynamicTooltip();
    });
    new import_obsidian2.Setting(contentEl).setName(this.plugin.i18n.t("VERTICAL_POSITION")).setDesc(this.plugin.i18n.t("VERTICAL_POSITION_DESC")).addSlider((slider) => {
      this.ySlider = slider;
      return slider.setLimits(0, 100, 1).setValue(this.yPosition).setDisabled(!this.useCustomPosition).onChange((value) => {
        this.yPosition = value;
        this.updatePreview();
      }).setDynamicTooltip();
    });
    contentEl.createEl("h3", { text: this.plugin.i18n.t("PREVIEW_EFFECT") });
    const previewContainer = contentEl.createDiv();
    previewContainer.style.border = "1px solid var(--background-modifier-border)";
    previewContainer.style.borderRadius = "4px";
    previewContainer.style.overflow = "hidden";
    previewContainer.style.marginBottom = "20px";
    this.previewCanvas.style.maxWidth = "100%";
    this.previewCanvas.style.maxHeight = "100%";
    previewContainer.appendChild(this.previewCanvas);
    this.updatePreview();
    const saveBtn = contentEl.createEl("button", {
      text: this.plugin.i18n.t("SAVE_TEMPLATE"),
      cls: "mod-cta"
    });
    saveBtn.addEventListener("click", async () => {
      if (!this.templateName.trim()) {
        alert(this.plugin.i18n.t("PLEASE_ENTER_TEMPLATE_NAME"));
        return;
      }
      this.plugin.settings.watermarkTemplates.push({
        name: this.templateName.trim(),
        text: this.watermarkText,
        opacity: this.opacity,
        size: this.size,
        position: this.position,
        color: this.color,
        useCustomPosition: this.useCustomPosition,
        xPosition: this.xPosition,
        yPosition: this.yPosition
      });
      await this.plugin.saveSettings();
      this.close();
    });
  }
  updatePreview() {
    const canvas = this.previewCanvas;
    const ctx = canvas.getContext("2d");
    if (!ctx)
      return;
    canvas.width = 300;
    canvas.height = 200;
    ctx.fillStyle = "#f0f0f0";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "#333";
    ctx.font = "14px sans-serif";
    ctx.textAlign = "center";
    ctx.fillText("\u9884\u89C8\u56FE\u50CF", canvas.width / 2, canvas.height / 2 - 10);
    ctx.font = "12px sans-serif";
    ctx.fillStyle = "#666";
    ctx.fillText("\u6B64\u4E3A\u6A21\u677F\u9884\u89C8\u6548\u679C", canvas.width / 2, canvas.height / 2 + 10);
    this.drawWatermarkPreview(ctx, canvas.width, canvas.height);
  }
  drawWatermarkPreview(ctx, width, height) {
    const { watermarkText: text, opacity, size, position, color, useCustomPosition, xPosition, yPosition } = this;
    const rgb = this.hexToRgb(color);
    if (rgb) {
      ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity / 100})`;
    }
    ctx.font = `${size}px sans-serif`;
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    let x = width / 2;
    let y = height / 2;
    if (useCustomPosition) {
      x = width * xPosition / 100;
      y = height * yPosition / 100;
    } else {
      switch (position) {
        case "top-left":
          x = size * 2;
          y = size * 2;
          ctx.textAlign = "left";
          ctx.textBaseline = "top";
          break;
        case "top-right":
          x = width - size * 2;
          y = size * 2;
          ctx.textAlign = "right";
          ctx.textBaseline = "top";
          break;
        case "bottom-left":
          x = size * 2;
          y = height - size * 2;
          ctx.textAlign = "left";
          ctx.textBaseline = "bottom";
          break;
        case "bottom-right":
          x = width - size * 2;
          y = height - size * 2;
          ctx.textAlign = "right";
          ctx.textBaseline = "bottom";
          break;
        case "center":
        default:
          x = width / 2;
          y = height / 2;
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          break;
      }
    }
    ctx.fillText(text, x, y);
  }
  hexToRgb(hex) {
    hex = hex.replace(/^#/, "");
    let bigint = parseInt(hex, 16);
    let r = bigint >> 16 & 255;
    let g = bigint >> 8 & 255;
    let b = bigint & 255;
    return { r, g, b };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
